package cn.luorenmu.action.commandHandle.entiy.eternalReturn.record

/**
 * @author LoMu
 * Date 2024.08.03 13:59
 */
data class EternalReturnMatch(
    val userNum: Long,
    val nickname: String,
    val gameID: Long,
    val seasonID: Long,
    val matchingMode: Long,
    val matchingTeamMode: Long,
    val characterNum: Long,
    val skinCode: Long,
    val characterLevel: Long,
    val gameRank: Long,
    val playerKill: Long,
    val playerAssistant: Long,
    val monsterKill: Long,
    val bestWeapon: Long,
    val bestWeaponLevel: Long,
    val masteryLevel: Map<String, Long>,
    val equipment: List<Long>,
    val versionMajor: Long,
    val versionMinor: Long,
    val language: String,
    val skillLevelInfo: Map<String, Long>,
    val skillOrderInfo: Map<String, Long>,
    val serverName: String,
    val maxHP: Long,
    val maxSP: Long,
    val attackPower: Long,
    val defense: Long,
    val hpRegen: Double,
    val spRegen: Double,
    val attackSpeed: Double,
    val moveSpeed: Double,
    val outOfCombatMoveSpeed: Double,
    val sightRange: Double,
    val attackRange: Double,
    val criticalStrikeChance: Long,
    val criticalStrikeDamage: Long,
    val coolDownReduction: Double,
    val lifeSteal: Double,
    val normalLifeSteal: Long,
    val skillLifeSteal: Long,
    val amplifierToMonster: Double,
    val trapDamage: Long,
    val rewardCoin: Long,
    val bonusCoin: Long,
    val gainExp: Long,
    val baseExp: Long,
    val bonusExp: Long,
    val startDtm: String,
    val duration: Long,
    val mmrBefore: Long,
    val mmrGain: Long,
    val mmrAfter: Long,
    val playTime: Long,
    val watchTime: Long,
    val totalTime: Long,
    val survivableTime: Long,
    val botAdded: Long,
    val botRemain: Long,
    val restrictedAreaAccelerated: Long,
    val safeAreas: Long,
    val teamNumber: Long,
    val preMade: Long,
    val eventMissionResult: List<Any?>,
    val gainedNormalMmrKFactor: Long,
    val victory: Long,
    val craftUncommon: Long,
    val craftRare: Long,
    val craftEpic: Long,
    val craftLegend: Long,
    val damageToPlayer: Long,
    val damageToPlayerTrap: Long,
    val damageToPlayerBasic: Long,
    val damageToPlayerSkill: Long,
    val damageToPlayerItemSkill: Long,
    val damageToPlayerDirect: Long,
    val damageToPlayerUniqueSkill: Long,
    val damageFromPlayer: Long,
    val damageFromPlayerTrap: Long,
    val damageFromPlayerBasic: Long,
    val damageFromPlayerSkill: Long,
    val damageFromPlayerItemSkill: Long,
    val damageFromPlayerDirect: Long,
    val damageFromPlayerUniqueSkill: Long,
    val damageToMonster: Long,
    val damageToMonsterTrap: Long,
    val damageToMonsterBasic: Long,
    val damageToMonsterSkill: Long,
    val damageToMonsterItemSkill: Long,
    val damageToMonsterDirect: Long,
    val damageToMonsterUniqueSkill: Long,
    val damageFromMonster: Long,
    val damageToPlayerShield: Long,
    val damageOffsetedByShieldPlayer: Long,
    val damageOffsetedByShieldMonster: Long,
    val killMonsters: Map<String, Long>,
    val healAmount: Long,
    val teamRecover: Long,
    val protectAbsorb: Long,
    val addSurveillanceCamera: Long,
    val addTelephotoCamera: Long,
    val removeSurveillanceCamera: Long,
    val removeTelephotoCamera: Long,
    val useHyperLoop: Long,
    val useSecurityConsole: Long,
    val giveUp: Long,
    val teamSpectator: Long,
    val pcCafe: Long,
    val routeIDOfStart: Long,
    val routeSlotID: Long,
    val placeOfStart: String,
    val mmrAvg: Long,
    val matchSize: Long,
    val teamKill: Long,
    val totalFieldKill: Long,
    val accountLevel: Long,
    val killerUserNum: Long,
    val killer: String,
    val killDetail: String? = null,
    val causeOfDeath: String? = null,
    val placeOfDeath: String? = null,
    val killerCharacter: String? = null,
    val killerWeapon: String? = null,
    val killerUserNum2: Long,
    val killer2: String? = null,
    val killDetail2: String? = null,
    val causeOfDeath2: String? = null,
    val placeOfDeath2: String? = null,
    val killerCharacter2: String? = null,
    val killerWeapon2: String? = null,
    val killerUserNum3: Long,
    val killer3: String? = null,
    val killDetail3: String? = null,
    val causeOfDeath3: String? = null,
    val placeOfDeath3: String? = null,
    val killerCharacter3: String? = null,
    val killerWeapon3: String? = null,
    val fishingCount: Long,
    val useEmoticonCount: Long,
    val expireDtm: String,
    val traitFirstCore: Long,
    val traitFirstSub: List<Long>,
    val traitSecondSub: List<Long>,
    val airSupplyOpenCount: List<Long>,
    val foodCraftCount: List<Long>,
    val beverageCraftCount: List<Long>,
    val rankPoint: Long,
    val totalTurbineTakeOver: Long,
    val usedNormalHealPack: Long,
    val usedReinforcedHealPack: Long,
    val usedNormalShieldPack: Long,
    val usedReinforceShieldPack: Long,
    val totalVFCredits: List<Long>,
    val usedVFCredits: List<Long>,
    val sumTotalVFCredits: Long,
    val sumUsedVFCredits: Long,
    val craftMythic: Long,
    val playerDeaths: Long,
    val killGamma: Boolean,
    val scoredPoint: List<Long>,
    val killDetails: String,
    val deathDetails: String,
    val killsPhaseOne: Long,
    val killsPhaseTwo: Long,
    val killsPhaseThree: Long,
    val deathsPhaseOne: Long,
    val deathsPhaseTwo: Long,
    val deathsPhaseThree: Long,
    val usedPairLoop: Long,
    val ccTimeToPlayer: Double,
    val creditSource: Map<String, Double>,
    val boughtInfusion: String,
    val itemTransferredConsole: List<Long>,
    val itemTransferredDrone: List<Long>,
    val escapeState: Long,
    val totalDoubleKill: Long,
    val totalTripleKill: Long,
    val totalQuadraKill: Long,
    val totalExtraKill: Long,
    val collectItemForLog: List<Long>,
    val equipFirstItemForLog: List<List<Long>>,
    val battleZone1AreaCode: Long,
    val battleZone1BattleMark: Long,
    val battleZone1ItemCode: List<Long>,
    val battleZone2AreaCode: Long,
    val battleZone2BattleMark: Long,
    val battleZone2ItemCode: List<Any?>,
    val battleZone3AreaCode: Long,
    val battleZone3BattleMark: Long,
    val battleZone3ItemCode: List<Any?>,
    val battleZonePlayerKill: Long,
    val battleZoneDeaths: Long,
    val battleZone1Winner: Long,
    val battleZone2Winner: Long,
    val battleZone3Winner: Long,
    val battleZone1BattleMarkCount: Long,
    val battleZone2BattleMarkCount: Long,
    val battleZone3BattleMarkCount: Long,
    val tacticalSkillGroup: Long,
    val tacticalSkillLevel: Long,
    val totalGainVFCredit: Long,
    val killPlayerGainVFCredit: Long,
    val killChickenGainVFCredit: Long,
    val killBoarGainVFCredit: Long,
    val killWildDogGainVFCredit: Long,
    val killWolfGainVFCredit: Long,
    val killBearGainVFCredit: Long,
    val killOmegaGainVFCredit: Long,
    val killBatGainVFCredit: Long,
    val killWicklineGainVFCredit: Long,
    val killAlphaGainVFCredit: Long,
    val killItemBountyGainVFCredit: Long,
    val killDroneGainVFCredit: Long,
    val killGammaGainVFCredit: Long,
    val killTurretGainVFCredit: Long,
    val itemShredderGainVFCredit: Long,
    val totalUseVFCredit: Long,
    val remoteDroneUseVFCreditMySelf: Long,
    val remoteDroneUseVFCreditAlly: Long,
    val transferConsoleFromMaterialUseVFCredit: Long,
    val transferConsoleFromEscapeKeyUseVFCredit: Long,
    val transferConsoleFromRevivalUseVFCredit: Long,
    val tacticalSkillUpgradeUseVFCredit: Long,
    val infusionReRollUseVFCredit: Long,
    val infusionTraitUseVFCredit: Long,
    val infusionRelicUseVFCredit: Long,
    val infusionStoreUseVFCredit: Long,
    val teamElimination: Long,
    val teamDown: Long,
    val teamBattleZoneDown: Long,
    val teamRepeatDown: Long,
    val adaptiveForce: Long,
    val adaptiveForceAttack: Long,
    val adaptiveForceAmplify: Long,
    val skillAmp: Long,
    val campFireCraftUncommon: Long,
    val campFireCraftRare: Long,
    val campFireCraftEpic: Long,
    val campFireCraftLegendary: Long,
    val cobaltRandomPickRemoveCharacter: Long,
    val tacticalSkillUseCount: Long,
    val creditRevivalCount: Long,
    val creditRevivedOthersCount: Long,
    val timeSpentInBriefingRoom: Long,
    val isLeavingBeforeCreditRevivalTerminate: Boolean,
    val crGetAnimal: Long,
    val crGetMutant: Long,
    val crGetPhaseStart: Long,
    val crGetKill: Long,
    val crGetAssist: Long,
    val crGetTimeElapsed: Long,
    val crGetCreditBonus: Long,
    val crUseRemoteDrone: Long,
    val crUseUpgradeTacticalSkill: Long,
    val crUseTreeOfLife: Long,
    val crUseMeteorite: Long,
    val crUseMythril: Long,
    val crUseForceCore: Long,
    val crUseVFBloodSample: Long,
    val crUseActivationModule: Long,
    val crUseRootkit: Long,
    val mmrGainInGame: Long,
    val mmrLossEntryCost: Long,
    val premadeMatchingType: Long,
    val viewContribution: Long,
    val useReconDrone: Long,
    val useEmpDrone: Long,
    val exceptPreMadeTeam: Boolean,
    val terminateCount: Long,
    val clutchCount: Long,
    val unknownKill: Long,
    val mainWeather: Long,
    val subWeather: Long,
    val activeInstallation: Map<String, Long>,
    val matchIsLeavingBeforeCreditRevivalTerminate: Boolean,
)
